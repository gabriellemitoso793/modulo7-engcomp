{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Inteli\\\\Documents\\\\GitHub\\\\modulo7-engcomp\\\\ponderada-crypto\\\\src\\\\frontend\\\\src\\\\components\\\\Dashboard.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport CryptoSelector from './CryptoSelector';\nimport Graph from './Graph';\nimport Forecast from './Forecast';\nimport Loading from './Loading';\nimport { fetchCryptoData } from '../api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Dashboard = () => {\n  _s();\n  const [selectedCrypto, setSelectedCrypto] = useState('bitcoin');\n  const [data, setData] = useState(null);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    const getData = async () => {\n      setLoading(true);\n      try {\n        const result = await fetchCryptoData(selectedCrypto);\n        setData(result);\n      } catch (error) {\n        console.error(\"Erro ao buscar dados da API\", error);\n      } finally {\n        setLoading(false);\n      }\n    };\n    getData();\n  }, [selectedCrypto]);\n  if (loading) return /*#__PURE__*/_jsxDEV(Loading, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 25\n  }, this);\n  if (!data || !data.dates || !data.dates[selectedCrypto]) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"No data available\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 16\n    }, this);\n  }\n  const forecastData = data.dates[selectedCrypto]; // Certifique-se de que isso contém 'previsao_dias'\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(CryptoSelector, {\n      selectedCrypto: selectedCrypto,\n      setSelectedCrypto: setSelectedCrypto\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col-lg-6\",\n        children: /*#__PURE__*/_jsxDEV(Graph, {\n          forecast: forecastData\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col-lg-6\",\n        children: /*#__PURE__*/_jsxDEV(Forecast, {\n          forecast: forecastData\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 9\n  }, this);\n};\n_s(Dashboard, \"Pskg3E8tFk1AfQeKnZwvXJgZV9E=\");\n_c = Dashboard;\nexport default Dashboard;\nvar _c;\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"names":["React","useState","useEffect","CryptoSelector","Graph","Forecast","Loading","fetchCryptoData","jsxDEV","_jsxDEV","Dashboard","_s","selectedCrypto","setSelectedCrypto","data","setData","loading","setLoading","getData","result","error","console","fileName","_jsxFileName","lineNumber","columnNumber","dates","children","forecastData","className","forecast","_c","$RefreshReg$"],"sources":["C:/Users/Inteli/Documents/GitHub/modulo7-engcomp/ponderada-crypto/src/frontend/src/components/Dashboard.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport CryptoSelector from './CryptoSelector';\nimport Graph from './Graph';\nimport Forecast from './Forecast';\nimport Loading from './Loading';\nimport { fetchCryptoData } from '../api';\n\nconst Dashboard = () => {\n    const [selectedCrypto, setSelectedCrypto] = useState('bitcoin');\n    const [data, setData] = useState(null);\n    const [loading, setLoading] = useState(true);\n\n    useEffect(() => {\n        const getData = async () => {\n            setLoading(true);\n            try {\n                const result = await fetchCryptoData(selectedCrypto);\n                setData(result);\n            } catch (error) {\n                console.error(\"Erro ao buscar dados da API\", error);\n            } finally {\n                setLoading(false);\n            }\n        };\n\n        getData();\n    }, [selectedCrypto]);\n\n    if (loading) return <Loading />;\n\n    if (!data || !data.dates || !data.dates[selectedCrypto]) {\n        return <div>No data available</div>;\n    }\n\n    const forecastData = data.dates[selectedCrypto]; // Certifique-se de que isso contém 'previsao_dias'\n\n    return (\n        <div className=\"container\">\n            <CryptoSelector selectedCrypto={selectedCrypto} setSelectedCrypto={setSelectedCrypto} />\n            <div className=\"row\">\n                <div className=\"col-lg-6\">\n                    <Graph forecast={forecastData} />\n                </div>\n                <div className=\"col-lg-6\">\n                    <Forecast forecast={forecastData} />\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default Dashboard;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}