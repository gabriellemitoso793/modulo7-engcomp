{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Inteli\\\\Documents\\\\GitHub\\\\modulo7-engcomp\\\\ponderada-crypto\\\\src\\\\frontend\\\\src\\\\components\\\\Dashboard.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport CryptoSelector from './CryptoSelector';\nimport Graph from './Graph';\nimport Forecast from './Forecast';\nimport Loading from './Loading';\nimport { fetchCryptoData } from '../api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Dashboard = () => {\n  _s();\n  const [selectedCrypto, setSelectedCrypto] = useState('bitcoin');\n  const [data, setData] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null); // New state to handle errors\n\n  useEffect(() => {\n    const getData = async () => {\n      setLoading(true);\n      setError(null); // Reset error before fetching data\n      try {\n        const result = await fetchCryptoData(selectedCrypto);\n\n        // Check if result and result.dates are defined\n        if (result && result.dates && result.dates[selectedCrypto]) {\n          setData(result.dates[selectedCrypto]);\n        } else {\n          setError('Dados não encontrados para a criptomoeda selecionada.');\n        }\n      } catch (err) {\n        setError('Erro ao carregar os dados.');\n      } finally {\n        setLoading(false);\n      }\n    };\n    getData();\n  }, [selectedCrypto]);\n  if (loading) return /*#__PURE__*/_jsxDEV(Loading, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 25\n  }, this);\n  if (error) return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"alert alert-danger\",\n    children: error\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 23\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(CryptoSelector, {\n      selectedCrypto: selectedCrypto,\n      setSelectedCrypto: setSelectedCrypto\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col-lg-6\",\n        children: /*#__PURE__*/_jsxDEV(Graph, {\n          data: data\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col-lg-6\",\n        children: /*#__PURE__*/_jsxDEV(Forecast, {\n          forecast: data\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 9\n  }, this);\n};\n_s(Dashboard, \"miDfKtw3mLeY8vUOXYP3YHu0Bd8=\");\n_c = Dashboard;\nexport default Dashboard;\nvar _c;\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"names":["React","useState","useEffect","CryptoSelector","Graph","Forecast","Loading","fetchCryptoData","jsxDEV","_jsxDEV","Dashboard","_s","selectedCrypto","setSelectedCrypto","data","setData","loading","setLoading","error","setError","getData","result","dates","err","fileName","_jsxFileName","lineNumber","columnNumber","className","children","forecast","_c","$RefreshReg$"],"sources":["C:/Users/Inteli/Documents/GitHub/modulo7-engcomp/ponderada-crypto/src/frontend/src/components/Dashboard.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport CryptoSelector from './CryptoSelector';\nimport Graph from './Graph';\nimport Forecast from './Forecast';\nimport Loading from './Loading';\nimport { fetchCryptoData } from '../api';\n\nconst Dashboard = () => {\n    const [selectedCrypto, setSelectedCrypto] = useState('bitcoin');\n    const [data, setData] = useState(null);\n    const [loading, setLoading] = useState(true);\n    const [error, setError] = useState(null);  // New state to handle errors\n\n    useEffect(() => {\n        const getData = async () => {\n            setLoading(true);\n            setError(null);  // Reset error before fetching data\n            try {\n                const result = await fetchCryptoData(selectedCrypto);\n                \n                // Check if result and result.dates are defined\n                if (result && result.dates && result.dates[selectedCrypto]) {\n                    setData(result.dates[selectedCrypto]);\n                } else {\n                    setError('Dados não encontrados para a criptomoeda selecionada.');\n                }\n            } catch (err) {\n                setError('Erro ao carregar os dados.');\n            } finally {\n                setLoading(false);\n            }\n        };\n\n        getData();\n    }, [selectedCrypto]);\n\n    if (loading) return <Loading />;\n    if (error) return <div className=\"alert alert-danger\">{error}</div>;\n\n    return (\n        <div className=\"container\">\n            <CryptoSelector selectedCrypto={selectedCrypto} setSelectedCrypto={setSelectedCrypto} />\n            <div className=\"row\">\n                <div className=\"col-lg-6\">\n                    <Graph data={data} />\n                </div>\n                <div className=\"col-lg-6\">\n                    <Forecast forecast={data} />\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default Dashboard;\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}